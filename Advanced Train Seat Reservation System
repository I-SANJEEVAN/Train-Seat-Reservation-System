import React, { useState, useEffect, useMemo } from 'react';
import { 
  AlertTriangle, 
  Train, 
  Check, 
  X, 
  RefreshCcw 
} from 'lucide-react';

// Advanced Seat Management Class
class SeatManager {
  constructor(totalRows, seatsPerFullRow, lastRowSeats) {
    this.totalRows = totalRows;
    this.seatsPerFullRow = seatsPerFullRow;
    this.lastRowSeats = lastRowSeats;
    this.totalSeats = (totalRows - 1) * seatsPerFullRow + lastRowSeats;
    
    // Initialize seat states
    this.seats = Array(this.totalSeats).fill({
      isBooked: false,
      passengerDetails: null,
      bookingTime: null
    });

    // Pre-book some seats (simulating real-world scenario)
    this.preBookSeats();
  }

  preBookSeats() {
    const preBookedSeats = [5, 12, 18, 25, 33, 47];
    preBookedSeats.forEach(seatNumber => {
      this.bookSeat(seatNumber - 1, {
        name: 'Pre-booked',
        age: null,
        gender: null
      });
    });
  }

  // Find best seats for booking
  findBestSeats(count, passengerDetails) {
    // Prioritize same row booking
    for (let row = 0; row < this.totalRows; row++) {
      const startSeat = row * this.seatsPerFullRow;
      const rowSize = row === this.totalRows - 1 ? this.lastRowSeats : this.seatsPerFullRow;
      
      let consecutiveSeats = 0;
      let startIndex = -1;

      for (let i = 0; i < rowSize; i++) {
        const seatIndex = startSeat + i;
        
        if (!this.seats[seatIndex].isBooked) {
          if (consecutiveSeats === 0) startIndex = seatIndex;
          consecutiveSeats++;

          if (consecutiveSeats === count) {
            return Array.from(
              {length: count}, 
              (_, k) => ({
                seatIndex: startIndex + k,
                seatNumber: startIndex + k + 1
              })
            );
          }
        } else {
          consecutiveSeats = 0;
          startIndex = -1;
        }
      }
    }

    // Fallback: Find nearby seats
    const availableSeats = [];
    for (let i = 0; i < this.seats.length && availableSeats.length < count; i++) {
      if (!this.seats[i].isBooked) {
        availableSeats.push({
          seatIndex: i,
          seatNumber: i + 1
        });
      }
    }

    return availableSeats.slice(0, count);
  }

  bookSeat(seatIndex, passengerDetails) {
    if (this.seats[seatIndex].isBooked) return false;

    this.seats[seatIndex] = {
      isBooked: true,
      passengerDetails,
      bookingTime: new Date()
    };
    return true;
  }

  cancelBooking(seatIndex) {
    if (!this.seats[seatIndex].isBooked) return false;

    this.seats[seatIndex] = {
      isBooked: false,
      passengerDetails: null,
      bookingTime: null
    };
    return true;
  }

  getAvailableSeatsCount() {
    return this.seats.filter(seat => !seat.isBooked).length;
  }
}

// Advanced Train Seat Reservation Component
const AdvancedTrainSeatReservation = () => {
  // Seat Configuration
  const TOTAL_ROWS = 12;
  const SEATS_PER_FULL_ROW = 7;
  const SEATS_IN_LAST_ROW = 3;

  // State Management
  const [seatManager] = useState(() => 
    new SeatManager(TOTAL_ROWS, SEATS_PER_FULL_ROW, SEATS_IN_LAST_ROW)
  );
  const [seatsToBook, setSeatsToBook] = useState(1);
  const [bookingResult, setBookingResult] = useState([]);
  const [passengerName, setPassengerName] = useState('');
  const [passengerAge, setPassengerAge] = useState('');
  const [passengerGender, setPassengerGender] = useState('');
  const [bookingError, setBookingError] = useState(null);

  // Memoized available seats count
  const availableSeatsCount = useMemo(() => 
    seatManager.getAvailableSeatsCount(), 
    [seatManager]
  );

  // Booking Handler
  const handleBookSeats = () => {
    // Validate passenger details
    if (!passengerName || !passengerAge || !passengerGender) {
      setBookingError('Please fill all passenger details');
      return;
    }

    // Validate seats to book
    if (seatsToBook < 1 || seatsToBook > 7) {
      setBookingError('You can book 1-7 seats at a time');
      return;
    }

    // Find and book seats
    const seatsToReserve = seatManager.findBestSeats(seatsToBook, {
      name: passengerName,
      age: parseInt(passengerAge),
      gender: passengerGender
    });

    if (seatsToReserve.length === seatsToBook) {
      // Book each seat
      const bookedSeatNumbers = seatsToReserve.map(seat => {
        seatManager.bookSeat(seat.seatIndex, {
          name: passengerName,
          age: parseInt(passengerAge),
          gender: passengerGender
        });
        return seat.seatNumber;
      });

      // Update booking results
      setBookingResult(bookedSeatNumbers);
      setBookingError(null);

      // Reset form
      setPassengerName('');
      setPassengerAge('');
      setPassengerGender('');
    } else {
      setBookingError('Not enough seats available');
    }
  };

  // Render seat grid
  const renderSeats = () => {
    const seatRows = [];
    let seatIndex = 0;

    for (let row = 0; row < TOTAL_ROWS; row++) {
      const rowSize = row === TOTAL_ROWS - 1 ? SEATS_IN_LAST_ROW : SEATS_PER_FULL_ROW;
      const rowSeats = [];

      for (let i = 0; i < rowSize; i++) {
        const seat = seatManager.seats[seatIndex];
        rowSeats.push(
          <div 
            key={seatIndex} 
            className={`
              w-12 h-12 m-1 flex flex-col items-center justify-center 
              ${seat.isBooked ? 'bg-red-500' : 'bg-green-500'}
              text-white font-bold rounded
              relative group
            `}
          >
            {seatIndex + 1}
            {seat.isBooked && (
              <div className="absolute hidden group-hover:block bg-white text-black p-2 z-10 border rounded shadow-lg">
                <p>Booked by: {seat.passengerDetails?.name}</p>
                <p>Age: {seat.passengerDetails?.age}</p>
                <p>Gender: {seat.passengerDetails?.gender}</p>
              </div>
            )}
          </div>
        );
        seatIndex++;
      }

      seatRows.push(
        <div key={row} className="flex justify-center mb-2">
          {rowSeats}
        </div>
      );
    }

    return seatRows;
  };

  return (
    <div className="container mx-auto p-4 max-w-4xl">
      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        <div className="bg-blue-600 text-white p-4 flex items-center">
          <Train className="mr-2" />
          <h1 className="text-xl font-bold">Advanced Train Seat Reservation</h1>
        </div>

        <div className="p-6">
          {/* Passenger Details Form */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <input 
              type="text" 
              placeholder="Passenger Name"
              value={passengerName}
              onChange={(e) => setPassengerName(e.target.value)}
              className="border p-2 rounded"
            />
            <input 
              type="number" 
              placeholder="Age"
              value={passengerAge}
              onChange={(e) => setPassengerAge(e.target.value)}
              className="border p-2 rounded"
            />
            <select 
              value={passengerGender}
              onChange={(e) => setPassengerGender(e.target.value)}
              className="border p-2 rounded col-span-2"
            >
              <option value="">Select Gender</option>
              <option value="male">Male</option>
              <option value="female">Female</option>
              <option value="other">Other</option>
            </select>
          </div>

          {/* Booking Controls */}
          <div className="flex items-center space-x-4 mb-4">
            <label className="font-medium">Number of Seats:</label>
            <input 
              type="number" 
              min="1" 
              max="7" 
              value={seatsToBook}
              onChange={(e) => setSeatsToBook(Number(e.target.value))}
              className="border p-2 w-20 rounded"
            />
            <button 
              onClick={handleBookSeats}
              className="bg-blue-500 text-white px-4 py-2 rounded flex items-center"
            >
              <Check className="mr-2" /> Book Seats
            </button>
          </div>

          {/* Error Handling */}
          {bookingError && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4">
              <AlertTriangle className="inline mr-2" />
              {bookingError}
            </div>
          )}

          {/* Booking Result */}
          {bookingResult.length > 0 && (
            <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4">
              <Check className="inline mr-2" />
              Booked Seats: {bookingResult.join(', ')}
            </div>
          )}

          {/* Seat Availability */}
          <div className="flex justify-between items-center mb-4">
            <div className="text-gray-600">
              Available Seats: {availableSeatsCount}
            </div>
            <button 
              onClick={() => window.location.reload()}
              className="text-blue-500 flex items-center"
            >
              <RefreshCcw className="mr-2" /> Reset
            </button>
          </div>

          {/* Seat Grid */}
          <div className="mt-4">
            <h2 className="text-lg font-semibold mb-4 text-center">Seat Map</h2>
            {renderSeats()}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AdvancedTrainSeatReservation;
